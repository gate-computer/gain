// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/detail/detail.proto

/*
	Package detail is a generated protocol buffer package.

	It is generated from these files:
		server/detail/detail.proto

	It has these top-level messages:
		Context
		Position
*/
package detail

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Iface int32

const (
	Iface_DEFAULT Iface = 0
)

var Iface_name = map[int32]string{
	0: "DEFAULT",
}
var Iface_value = map[string]int32{
	"DEFAULT": 0,
}

func (x Iface) String() string {
	return proto.EnumName(Iface_name, int32(x))
}
func (Iface) EnumDescriptor() ([]byte, []int) { return fileDescriptorDetail, []int{0} }

type Context struct {
	Iface  Iface  `protobuf:"varint,1,opt,name=iface,proto3,enum=detail.Iface" json:"iface,omitempty"`
	Client string `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	Call   string `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
}

func (m *Context) Reset()                    { *m = Context{} }
func (*Context) ProtoMessage()               {}
func (*Context) Descriptor() ([]byte, []int) { return fileDescriptorDetail, []int{0} }

type Position struct {
	Context     Context `protobuf:"bytes,1,opt,name=context" json:"context"`
	ProgramId   string  `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	InstanceId  string  `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	InstanceArg int32   `protobuf:"varint,4,opt,name=instance_arg,json=instanceArg,proto3" json:"instance_arg,omitempty"`
	Subsystem   string  `protobuf:"bytes,5,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptorDetail, []int{1} }

func init() {
	proto.RegisterType((*Context)(nil), "detail.Context")
	proto.RegisterType((*Position)(nil), "detail.Position")
	proto.RegisterEnum("detail.Iface", Iface_name, Iface_value)
}
func (m *Context) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Context) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iface != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDetail(dAtA, i, uint64(m.Iface))
	}
	if len(m.Client) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDetail(dAtA, i, uint64(len(m.Client)))
		i += copy(dAtA[i:], m.Client)
	}
	if len(m.Call) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDetail(dAtA, i, uint64(len(m.Call)))
		i += copy(dAtA[i:], m.Call)
	}
	return i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDetail(dAtA, i, uint64(m.Context.Size()))
	n1, err := m.Context.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.ProgramId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDetail(dAtA, i, uint64(len(m.ProgramId)))
		i += copy(dAtA[i:], m.ProgramId)
	}
	if len(m.InstanceId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDetail(dAtA, i, uint64(len(m.InstanceId)))
		i += copy(dAtA[i:], m.InstanceId)
	}
	if m.InstanceArg != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDetail(dAtA, i, uint64(m.InstanceArg))
	}
	if len(m.Subsystem) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDetail(dAtA, i, uint64(len(m.Subsystem)))
		i += copy(dAtA[i:], m.Subsystem)
	}
	return i, nil
}

func encodeVarintDetail(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Context) Size() (n int) {
	var l int
	_ = l
	if m.Iface != 0 {
		n += 1 + sovDetail(uint64(m.Iface))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovDetail(uint64(l))
	}
	l = len(m.Call)
	if l > 0 {
		n += 1 + l + sovDetail(uint64(l))
	}
	return n
}

func (m *Position) Size() (n int) {
	var l int
	_ = l
	l = m.Context.Size()
	n += 1 + l + sovDetail(uint64(l))
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovDetail(uint64(l))
	}
	l = len(m.InstanceId)
	if l > 0 {
		n += 1 + l + sovDetail(uint64(l))
	}
	if m.InstanceArg != 0 {
		n += 1 + sovDetail(uint64(m.InstanceArg))
	}
	l = len(m.Subsystem)
	if l > 0 {
		n += 1 + l + sovDetail(uint64(l))
	}
	return n
}

func sovDetail(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDetail(x uint64) (n int) {
	return sovDetail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Context) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Context: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Context: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iface", wireType)
			}
			m.Iface = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iface |= (Iface(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Call = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDetail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Context.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceArg", wireType)
			}
			m.InstanceArg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceArg |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDetail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDetail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDetail
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDetail
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDetail(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDetail = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDetail   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("server/detail/detail.proto", fileDescriptorDetail) }

var fileDescriptorDetail = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcb, 0x4a, 0xf3, 0x40,
	0x14, 0x80, 0x33, 0xff, 0xdf, 0xb4, 0xf6, 0xd4, 0x1b, 0x83, 0x48, 0x10, 0x9d, 0xd6, 0x8a, 0x50,
	0x5c, 0x34, 0x50, 0x1f, 0x40, 0x5a, 0x2f, 0x50, 0x70, 0x21, 0x41, 0x37, 0xdd, 0xc8, 0x74, 0x32,
	0xc6, 0x81, 0x34, 0x53, 0x66, 0xa6, 0x45, 0xdf, 0xc2, 0x07, 0xf2, 0x01, 0xb2, 0x74, 0xe9, 0x4a,
	0x6c, 0x7c, 0x11, 0x69, 0x32, 0x09, 0xb8, 0x9a, 0x39, 0xdf, 0xb9, 0x7c, 0x1c, 0x0e, 0x1c, 0x68,
	0xae, 0x96, 0x5c, 0xf9, 0x21, 0x37, 0x54, 0xc4, 0xf6, 0xe9, 0xcf, 0x95, 0x34, 0x12, 0xd7, 0x8b,
	0xa8, 0x3b, 0x81, 0xc6, 0xa5, 0x4c, 0x0c, 0x7f, 0x31, 0xf8, 0x04, 0x5c, 0xf1, 0x44, 0x19, 0xf7,
	0x50, 0x07, 0xf5, 0xb6, 0x07, 0x5b, 0x7d, 0xdb, 0x30, 0x5e, 0xc3, 0xa0, 0xc8, 0xe1, 0x7d, 0xa8,
	0xb3, 0x58, 0xf0, 0xc4, 0x78, 0xff, 0x3a, 0xa8, 0xd7, 0x0c, 0x6c, 0x84, 0x31, 0xd4, 0x18, 0x8d,
	0x63, 0xef, 0x7f, 0x4e, 0xf3, 0x7f, 0xf7, 0x1d, 0xc1, 0xc6, 0x9d, 0xd4, 0xc2, 0x08, 0x99, 0x60,
	0x1f, 0x1a, 0xac, 0x10, 0xe5, 0xf3, 0x5b, 0x83, 0x9d, 0x72, 0xbe, 0xf5, 0x8f, 0x6a, 0xe9, 0x57,
	0xdb, 0x09, 0xca, 0x2a, 0x7c, 0x04, 0x30, 0x57, 0x32, 0x52, 0x74, 0xf6, 0x28, 0x42, 0x6b, 0x6b,
	0x5a, 0x32, 0x0e, 0x71, 0x1b, 0x5a, 0x22, 0xd1, 0x86, 0x26, 0x8c, 0xaf, 0xf3, 0x85, 0x17, 0x4a,
	0x34, 0x0e, 0xf1, 0x31, 0x6c, 0x56, 0x05, 0x54, 0x45, 0x5e, 0xad, 0x83, 0x7a, 0x6e, 0x50, 0x35,
	0x0d, 0x55, 0x84, 0x0f, 0xa1, 0xa9, 0x17, 0x53, 0xfd, 0xaa, 0x0d, 0x9f, 0x79, 0x6e, 0x61, 0xa8,
	0xc0, 0xd9, 0x1e, 0xb8, 0xf9, 0xea, 0xb8, 0x05, 0x8d, 0xab, 0xeb, 0x9b, 0xe1, 0xc3, 0xed, 0xfd,
	0xae, 0x33, 0xba, 0x48, 0x57, 0xc4, 0xf9, 0x5c, 0x11, 0x27, 0xcd, 0x08, 0xfa, 0xc8, 0x08, 0xfa,
	0xce, 0x08, 0x7a, 0xfb, 0x21, 0xce, 0xe4, 0x34, 0x12, 0xe6, 0x79, 0x31, 0xed, 0x33, 0x39, 0xf3,
	0x8d, 0xa6, 0x4b, 0x19, 0x53, 0x3f, 0xa2, 0x86, 0xfb, 0x7f, 0xce, 0x30, 0xad, 0xe7, 0x07, 0x38,
	0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x06, 0x9f, 0x6f, 0x9e, 0x01, 0x00, 0x00,
}
