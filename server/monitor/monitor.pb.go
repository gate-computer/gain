// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/monitor/monitor.proto

/*
	Package monitor is a generated protocol buffer package.

	It is generated from these files:
		server/monitor/monitor.proto

	It has these top-level messages:
		State
		Error
		Event
*/
package monitor

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import detail "github.com/tsavola/gate/server/detail"
import event "github.com/tsavola/gate/server/event"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type State struct {
	ProgramsLoaded uint32 `protobuf:"varint,1,opt,name=programs_loaded,json=programsLoaded,proto3" json:"programs_loaded,omitempty"`
	ProgramLinks   uint32 `protobuf:"varint,2,opt,name=program_links,json=programLinks,proto3" json:"program_links,omitempty"`
	Instances      uint32 `protobuf:"varint,3,opt,name=instances,proto3" json:"instances,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptorMonitor, []int{0} }

type Error struct {
	Position detail.Position `protobuf:"bytes,1,opt,name=position" json:"position"`
	Error    string          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorMonitor, []int{1} }

type Event struct {
	Type  event.Event_Type `protobuf:"varint,1,opt,name=type,proto3,enum=event.Event_Type" json:"type,omitempty"`
	Event []byte           `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	Error string           `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorMonitor, []int{2} }

func init() {
	proto.RegisterType((*State)(nil), "monitor.State")
	proto.RegisterType((*Error)(nil), "monitor.Error")
	proto.RegisterType((*Event)(nil), "monitor.Event")
}
func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProgramsLoaded != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(m.ProgramsLoaded))
	}
	if m.ProgramLinks != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(m.ProgramLinks))
	}
	if m.Instances != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(m.Instances))
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMonitor(dAtA, i, uint64(m.Position.Size()))
	n1, err := m.Position.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(m.Type))
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMonitor(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeVarintMonitor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *State) Size() (n int) {
	var l int
	_ = l
	if m.ProgramsLoaded != 0 {
		n += 1 + sovMonitor(uint64(m.ProgramsLoaded))
	}
	if m.ProgramLinks != 0 {
		n += 1 + sovMonitor(uint64(m.ProgramLinks))
	}
	if m.Instances != 0 {
		n += 1 + sovMonitor(uint64(m.Instances))
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovMonitor(uint64(l))
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovMonitor(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMonitor(uint64(m.Type))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovMonitor(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovMonitor(uint64(l))
	}
	return n
}

func sovMonitor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMonitor(x uint64) (n int) {
	return sovMonitor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramsLoaded", wireType)
			}
			m.ProgramsLoaded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramsLoaded |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramLinks", wireType)
			}
			m.ProgramLinks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramLinks |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			m.Instances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instances |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (event.Event_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event[:0], dAtA[iNdEx:postIndex]...)
			if m.Event == nil {
				m.Event = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonitor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonitor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonitor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMonitor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMonitor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMonitor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMonitor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonitor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("server/monitor/monitor.proto", fileDescriptorMonitor) }

var fileDescriptorMonitor = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x9b, 0xaf, 0xcd, 0x07, 0x35, 0x6d, 0x01, 0x8b, 0x21, 0xaa, 0xaa, 0x80, 0x8a, 0xf8,
	0x33, 0x25, 0x52, 0x59, 0x99, 0x2a, 0x75, 0xeb, 0x00, 0x81, 0xa9, 0x4b, 0xe5, 0xb6, 0x57, 0xc5,
	0x22, 0xb1, 0x23, 0xfb, 0x12, 0xa9, 0x6f, 0xc1, 0x63, 0x65, 0xe4, 0x09, 0x10, 0x84, 0x17, 0x41,
	0xb1, 0x4d, 0x0b, 0x4b, 0xae, 0xee, 0xef, 0x9c, 0x9c, 0xeb, 0x6b, 0x93, 0x81, 0x06, 0x55, 0x80,
	0x8a, 0x33, 0x29, 0x38, 0xca, 0x6d, 0x8d, 0x72, 0x25, 0x51, 0xd2, 0x3d, 0xd7, 0xf6, 0xfb, 0xce,
	0xb6, 0x02, 0x64, 0x3c, 0x75, 0xc5, 0x9a, 0xfa, 0x81, 0xd3, 0xa0, 0x00, 0x81, 0xf6, 0x6b, 0x95,
	0xa1, 0x26, 0xfe, 0x03, 0x32, 0x04, 0x7a, 0x45, 0x0e, 0x73, 0x25, 0xd7, 0x8a, 0x65, 0x7a, 0x9e,
	0x4a, 0xb6, 0x82, 0x55, 0xe0, 0x9d, 0x79, 0xd7, 0xdd, 0xa4, 0xf7, 0x83, 0xa7, 0x86, 0xd2, 0x73,
	0xd2, 0x75, 0x64, 0x9e, 0x72, 0xf1, 0xac, 0x83, 0x7f, 0xc6, 0xd6, 0x71, 0x70, 0x5a, 0x33, 0x3a,
	0x20, 0x6d, 0x2e, 0x34, 0x32, 0xb1, 0x04, 0x1d, 0x34, 0x8d, 0x61, 0x07, 0x86, 0xf7, 0xc4, 0x9f,
	0x28, 0x25, 0x15, 0x1d, 0x91, 0xfd, 0x5c, 0x6a, 0x8e, 0x5c, 0x0a, 0x33, 0xed, 0x60, 0x74, 0x14,
	0xb9, 0x83, 0xdf, 0x39, 0x3e, 0x6e, 0x95, 0xef, 0xa7, 0x8d, 0x64, 0xeb, 0xa3, 0x27, 0xc4, 0x87,
	0xfa, 0x67, 0x33, 0xb7, 0x9d, 0xd8, 0x66, 0x38, 0x23, 0xfe, 0xa4, 0x5e, 0x8b, 0x5e, 0x90, 0x16,
	0x6e, 0x72, 0x30, 0x71, 0xbd, 0xd1, 0x71, 0x64, 0x97, 0x35, 0x5a, 0xf4, 0xb8, 0xc9, 0x21, 0x31,
	0xb2, 0x49, 0xa9, 0x99, 0x49, 0xe9, 0x24, 0xb6, 0xd9, 0x65, 0x37, 0x7f, 0x65, 0x8f, 0x6f, 0xcb,
	0xcf, 0xb0, 0x51, 0x56, 0xa1, 0xf7, 0x56, 0x85, 0xde, 0x47, 0x15, 0x7a, 0xaf, 0x5f, 0x61, 0x63,
	0x76, 0xb9, 0xe6, 0xf8, 0xf4, 0xb2, 0x88, 0x96, 0x32, 0x8b, 0x51, 0xb3, 0x42, 0xa6, 0x2c, 0x5e,
	0x33, 0x84, 0xf8, 0xef, 0x73, 0x2d, 0xfe, 0x9b, 0x8b, 0xbe, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0xe3, 0x4a, 0x67, 0xa1, 0xc7, 0x01, 0x00, 0x00,
}
